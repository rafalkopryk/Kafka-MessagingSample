version: "2.2"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    healthcheck:
      interval: 1s
      timeout: 5s
      retries: 120
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;

  es01:
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana
    depends_on:
      - es01
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    mem_limit: ${MEM_LIMIT}

  messaging.publishservice.api:
    image: ${DOCKER_REGISTRY-}messagingpublisherapi
    build:
      context: .
      dockerfile: Modules/Publisher/Publisher.Api/Dockerfile
    container_name: messaging-publisher
    depends_on:
      - kafka
    environment:
        ASPNETCORE_ENVIRONMENT: Development
        Elasticsearch__ConnectionString: http://elastic:${ELASTIC_PASSWORD}@es01:9200
        EventBus__bootstrapservers: kafka:9092
        EventBus__groupid: messaging-publisher

  messaging.consumerservice.api:
    image: ${DOCKER_REGISTRY-}messagingconsumerapi
    build:
      context: .
      dockerfile: Modules/Consumer/Consumer.Api/Dockerfile
    container_name: messaging-consumer
    depends_on:
      - kafka
    environment:
        ASPNETCORE_ENVIRONMENT: Development
        Elasticsearch__ConnectionString: http://elastic:${ELASTIC_PASSWORD}@es01:9200
        EventBus__bootstrapservers: kafka:9092
        EventBus__groupid: messaging-consumer
        EventBus__enableautocommit: "false"
        EventBus__statisticsintervalms: 5000
        EventBus__autooffsetreset: earliest
        EventBus__enablepartitioneof: "true"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
     - "9092:9092"
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  apm:
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    container_name: apm
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - 8200:8200
    depends_on:
        - es01
        - kibana
    command: >
      apm-server -e
         -E output.elasticsearch.hosts=["es01:9200"]
         -E output.elasticsearch.protocol=http
         -E output.elasticsearch.username=elastic
         -E output.elasticsearch.password=${ELASTIC_PASSWORD}
         -E output.elasticsearch.ssl.enabled=false
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
        - kafka
        - zookeeper

  #influxdb:
  #  image: influxdb:latest
  #  container_name: influxdb
  #  ports:
  #    - '8086:8086'
  #  volumes:
  #    - influxdb-storage:/var/lib/influxdb
  #  environment:
  #    - INFLUXDB_DB=db0
  #    - INFLUXDB_ADMIN_USER=admin
  #    - INFLUXDB_ADMIN_PASSWORD=admin
  #  networks:
  #   - influxnetwork

  #chronograf:
  #  image: chronograf:latest
  #  container_name: chronograf
  #  ports:
  #    - '127.0.0.1:8888:8888'
  #  volumes:
  #    - chronograf-storage:/var/lib/chronograf
  #  depends_on:
  #    - influxdb
  #  environment:
  #    - INFLUXDB_URL=http://influxdb:8086
  #    - INFLUXDB_USERNAME=admin
  #    - INFLUXDB_PASSWORD=admin
  #  networks:
  #   - influxnetwork

  otel:
    container_name: otel
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4318:4318"
      - "4317:4317"
    depends_on:
      - apm
      - zipkin-all-in-one

  zipkin-all-in-one:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"

volumes:
  esdata01:
    driver: local
  kibanadata:
    driver: local