version: '3.8'

services:
  messaging.publishservice.api:
    image: ${DOCKER_REGISTRY-}messagingpublisherapi
    build:
      context: .
      dockerfile: Modules/Publisher/Publisher.Api/Dockerfile
    container_name: messaging-publisher
    networks:
      - kafkanetwork
      - elasticsearchnetwork
      - influxnetwork
    depends_on:
      - kafka
    environment:
        ASPNETCORE_ENVIRONMENT: Development
        Elasticsearch__Url: http://elastic:9200
        EventBus__bootstrapservers: kafka:9092
        EventBus__groupid: messaging-publisher
        ElasticApm__ServerUrl: http://apm:8200
        INFLUXDB__URL: http://influxdb:8086
        INFLUXDB__TOKEN: rbiebsEkl9e2ftd6HDfRR_1rlQLagPulKMAwSO6MukgBxGx8OxX-G9HSbTMbm6TQInu1eFSa8vJonPzSbdGj3A==

  messaging.consumerservice.api:
    image: ${DOCKER_REGISTRY-}messagingconsumerapi
    build:
      context: .
      dockerfile: Modules/Consumer/Consumer.Api/Dockerfile
    container_name: messaging-consumer
    networks:
      - kafkanetwork
      - elasticsearchnetwork
      - influxnetwork
    depends_on:
      - kafka
    environment:
        ASPNETCORE_ENVIRONMENT: Development
        Elasticsearch__Url: http://elastic:9200
        EventBus__bootstrapservers: kafka:9092
        EventBus__groupid: messaging-consumer
        EventBus__enableautocommit: "false"
        EventBus__statisticsintervalms: 5000
        EventBus__autooffsetreset: earliest
        EventBus__enablepartitioneof: "true"
        ElasticApm__ServerUrl: http://apm:8200
        INFLUXDB__URL: http://influxdb:8086
        INFLUXDB__TOKEN: rbiebsEkl9e2ftd6HDfRR_1rlQLagPulKMAwSO6MukgBxGx8OxX-G9HSbTMbm6TQInu1eFSa8vJonPzSbdGj3A==

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
    - kafkanetwork
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
     - "9092:9092"
    hostname: kafka
    networks:
    - kafkanetwork
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    container_name: elastic
    environment:
      - node.name=elastic
      - discovery.type=single-node
    ports:
        - "9200:9200"
        - "9300:9300"
    volumes:
        - type: bind
          source: ./elasticsearchdata
          target: /usr/share/elasticsearch/data2
    networks:
        - elasticsearchnetwork
  kibana:
        image: docker.elastic.co/kibana/kibana:7.17.5
        container_name: kibana
        ports:
            - "5601:5601"
        networks:
            - elasticsearchnetwork
        depends_on:
            - elasticsearch

  apm:
    image: docker.elastic.co/apm/apm-server:7.17.5
    container_name: apm
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
      - 8200:8200
    networks:
        - elasticsearchnetwork 
    depends_on:
        - elasticsearch
        - kibana
    command: >
      apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elastic:9200"]

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
        - kafkanetwork 
    depends_on:
        - kafka
        - zookeeper

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - '8086:8086'
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=db0
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    networks:
     - influxnetwork

  chronograf:
    image: chronograf:latest
    container_name: chronograf
    ports:
      - '127.0.0.1:8888:8888'
    volumes:
      - chronograf-storage:/var/lib/chronograf
    depends_on:
      - influxdb
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=admin
    networks:
     - influxnetwork

volumes:
    elasticsearchdata:
    influxdb-storage:
    chronograf-storage:

networks:
  kafkanetwork:
    driver: bridge
  elasticsearchnetwork:
    driver: bridge
  influxnetwork:
    driver: bridge